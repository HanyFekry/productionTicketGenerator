// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using DomainClasses.Interfaces;
using System.ComponentModel.DataAnnotations;

namespace DomainClasses
{

    // Ma_Function
    public class Function: ISoftDelete
    {
        [Required]
        [Display(Name = "Id")]
        public int Id { get; set; } // ID (Primary key)

        [MaxLength(200)]
        [StringLength(200)]
        [Display(Name = "Ar name")]
        public string ArName { get; set; } // AR_Name (length: 200)

        [MaxLength(200)]
        [StringLength(200)]
        [Display(Name = "En name")]
        public string EnName { get; set; } // EN_Name (length: 200)

        [MaxLength(200)]
        [StringLength(200)]
        [Display(Name = "Page name")]
        public string PageName { get; set; } // PageName (length: 200)

        [Display(Name = "Is menue")]
        public bool? IsMenue { get; set; } // IsMenue

        [Display(Name = "Is report")]
        public bool IsReport { get; set; } // IsMenue

        [Required]
        [Display(Name = "Module ID")]
        public int ModuleId { get; set; } // ModuleID
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Icon")]
        public string FaIcon { get; set; } // EN_Name (length: 25)

        [Display(Name = "Is deleted")]
        public bool IsDeleted { get; set; } // IsDeleted

        // Reverse navigation

        /// <summary>
        /// Child Roles (Many-to-Many) mapped by table [Ma_Roles_Functions]
        /// </summary>
        public System.Collections.Generic.ICollection<Role> Roles { get; set; } // Many to many mapping

        // Foreign keys

        /// <summary>
        /// Parent Module pointed by [Ma_Function].([ModuleId]) (FK_Ma_Function_Ma_Module)
        /// </summary>
        [Required] public Module Module { get; set; } // FK_Ma_Function_Ma_Module

        public Function()
        {
            IsMenue = false;
            IsDeleted = false;
            Roles = new System.Collections.Generic.List<Role>();
        }
    }

}
// </auto-generated>
