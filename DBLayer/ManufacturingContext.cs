// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace DBLayer
{
    using DomainClasses;
    using DomainClasses.Entities;
    using DomainClasses.Entities.Mapping;
    using DomainClasses.Interfaces;
    using DomainClasses.Mapping;
    using EntityFramework.DynamicFilters;
    using System.Data.Entity;
    using System.Linq;

    public class ManufacturingContext : System.Data.Entity.DbContext
    {
        public DbSet<Customer> Customers { get; set; } // Ma_Customer
        public DbSet<Function> Functions { get; set; } // Ma_Customer
        public DbSet<Member> Members { get; set; } // Ma_Member
        public DbSet<Module> Modules { get; set; } // Ma_Module
        public DbSet<Role> Roles { get; set; } // Ma_Role
        public DbSet<WoData> WoDatas { get; set; } // Ma_WoData
        public DbSet<WoHeader> WoHeaders { get; set; } // V_PL_WOHeader
        public DbSet<CoileProductivity> CoileProductivities { get; set; } // QC_CoileProductivity
        public DbSet<Color> Colors { get; set; } // V_QC_Color
        public DbSet<Pallet> Pallets { get; set; } // QC_Pallet
        public DbSet<PalletsQualityStatus> PalletsQualityStatus { get; set; } // QC_Pallets_QualityStatuses
        public DbSet<QualityStatus> QualityStatus { get; set; } // QC_QualityStatus
        public DbSet<WoHeadersColor> WoHeadersColors { get; set; } // QC_QualityStatus
        public DbSet<DrumProductivity> DrumProductivities { get; set; }
        public DbSet<PalletType> PalletTypes { get; set; }


        static ManufacturingContext()
        {
            DbConfiguration.SetConfiguration(new ManufacturingConfiguration());
            //System.Data.Entity.Database.SetInitializer<ManufacturingContext>(null);
        }

        //public ManufacturingContext()
        //    : base("Name=ManufacturingContext")
        //{
        //}
        
        public ManufacturingContext()
            : base("plan_be")
        {
            //this.Configuration.LazyLoadingEnabled = true;
        }
        public override int SaveChanges()
        {
            var modifiedEntities = ChangeTracker.Entries()
            .Where(p => p.State == EntityState.Modified).ToList();
            var addedEntities = ChangeTracker.Entries()
            .Where(p => p.State == EntityState.Added).ToList();
            return base.SaveChanges();
        }

        public ManufacturingContext(string connectionString)
            : base(connectionString)
        {
        }

        public ManufacturingContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public ManufacturingContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public ManufacturingContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        public ManufacturingContext(System.Data.Entity.Core.Objects.ObjectContext objectContext, bool dbContextOwnsObjectContext)
            : base(objectContext, dbContextOwnsObjectContext)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new CustomerConfiguration());
            modelBuilder.Configurations.Add(new FunctionConfiguration());
            modelBuilder.Configurations.Add(new MemberConfiguration());
            modelBuilder.Configurations.Add(new ModuleConfiguration());
            modelBuilder.Configurations.Add(new RoleConfiguration());
            modelBuilder.Configurations.Add(new WoDataConfiguration());
            modelBuilder.Configurations.Add(new WoHeaderConfiguration());

            modelBuilder.Configurations.Add(new CoileProductivityConfiguration());
            modelBuilder.Configurations.Add(new ColorConfiguration());
            modelBuilder.Configurations.Add(new PalletConfiguration());
            modelBuilder.Configurations.Add(new PalletsQualityStatusConfiguration());
            modelBuilder.Configurations.Add(new QualityStatusConfiguration());
            modelBuilder.Configurations.Add(new WoHeadersColorConfiguration());
            modelBuilder.Configurations.Add(new DrumProductivityConfiguration());
            modelBuilder.Configurations.Add(new PalletTypeConfiguration());


            modelBuilder.Filter("IsDeleted", (ISoftDelete d) => d.IsDeleted, false);
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new CustomerConfiguration(schema));
            modelBuilder.Configurations.Add(new FunctionConfiguration(schema));
            modelBuilder.Configurations.Add(new MemberConfiguration(schema));
            modelBuilder.Configurations.Add(new ModuleConfiguration(schema));
            modelBuilder.Configurations.Add(new RoleConfiguration(schema));
            modelBuilder.Configurations.Add(new WoDataConfiguration(schema));
            modelBuilder.Configurations.Add(new WoHeaderConfiguration(schema));

            modelBuilder.Configurations.Add(new CoileProductivityConfiguration(schema));
            modelBuilder.Configurations.Add(new ColorConfiguration(schema));
            modelBuilder.Configurations.Add(new PalletConfiguration(schema));
            modelBuilder.Configurations.Add(new PalletsQualityStatusConfiguration(schema));
            modelBuilder.Configurations.Add(new QualityStatusConfiguration(schema));
            modelBuilder.Configurations.Add(new WoHeadersColorConfiguration(schema));
            modelBuilder.Configurations.Add(new DrumProductivityConfiguration(schema));
            return modelBuilder;
        }
    }
}
// </auto-generated>
